/* CSS Normalize */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
nav,
section,
summary {
  display: block;
}
audio,
canvas,
video {
  display: inline-block;
}
audio:not([controls]) {
  display: none;
  height: 0;
}
[hidden] {
  display: none;
}
html {
  font-family: sans-serif;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}
a:focus {
  outline: thin dotted;
}
a:active,
a:hover {
  outline: 0;
}
h1 {
  font-size: 2em;
}
abbr[title] {
  border-bottom: 1px dotted;
}
b,
strong {
  font-weight: 700;
}
dfn {
  font-style: italic;
}
mark {
  background: #ff0;
  color: #000;
}
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}
pre {
  white-space: pre-wrap;
  word-wrap: break-word;
}
q {
  quotes: \201C \201D \2018 \2019;
}
small {
  font-size: 80%;
}
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}
img {
  border: 0;
}
svg:not(:root) {
  overflow: hidden;
}
fieldset {
  border: 1px solid silver;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}
button,
input,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
}
button,
input {
  line-height: normal;
}
button,html input[type=button],/* 1 */
input[type=reset],input[type=submit] {
  -webkit-appearance: button;
  cursor: pointer;
}
button[disabled],
input[disabled] {
  cursor: default;
}
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}
input[type="search"] {
  -webkit-appearance: textfield;
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  box-sizing: content-box;
}
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
textarea {
  overflow: auto;
  vertical-align: top;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
body,
figure {
  margin: 0;
}
legend,
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/* Box-sizing border-box */
* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

/* Some default styles to make each box visible */
.box {
  color: white;
  font-size: 100px;
  text-align: center;
  text-shadow: 4px 4px 0 rgba(0, 0, 0, 0.1);
  padding: 10px;
}

/* Colours for each box */
.box1 {
  background: #1abc9c;
}
.box2 {
  background: #3498db;
}
.box3 {
  background: #9b59b6;
}
.box4 {
  background: #34495e;
}
.box5 {
  background: #f1c40f;
}
.box6 {
  background: #e67e22;
}
.box7 {
  background: #e74c3c;
}
.box8 {
  background: #bdc3c7;
}
.box9 {
  background: #2ecc71;
}
.box10 {
  background: #16a085;
}

/* align-items and justify-content example below */

/* .container {
  display: flex;
  justify-content: center;
  border: 10px solid #e1b382;

  min-height: 100vh;
  /* align-items: center; */
/* flex-direction: column;
} */

/* justify-content: flex-start will align it to the start, basically the default */
/* before justify-content, our divs are only as wide as the content within  */

/* The big Kahuna - how to center something vertically using flex-box.  We use justify-content: center with a flex-direction of column */

/* remember that justify-content aligns on the main axis */

/* align items is concerned with the cross- axis. */

/* if we want to center something vertically with align-items, we must make sure it has a height. */

/* can align items with flex-start and flex-end, just like with justify-content;

/* align-items: baseline can align elements based on the bottom of the font. Very Handy */

/* align-content example below  
 .container { 
  display: flex; 
  /* justify-content will center the 10 now  
   justify-content: center;
  border: 10px solid #e1b382;
  align-content: space-evenly;
  min-height: 100vh;
  flex-wrap: wrap; 
 }

 .box {
  width: 33.3333333%;
} 

*/

/* align-content takes a the space on the cross axis and splits it up */

/* Kind of like justify-content with the main axis */

/* default is align-content stretch */

/* we must make changes to the box divs within the container and then flex-wrap them to see align-content in action */

/* with both set, we can justify both left to right and top to bottom.
/* two important things for align-content, 1. we need a flex-wrap 2. We are only concerned with top to bottom */

/* align-self allows us to overwrite the styling of parent containers/divs */
.container {
  display: flex;
  border: 10px solid seagreen;
  height: 100vh;
  align-items: flex-start;
}

.box {
  width: 33%;
}

.box2 {
  padding-bottom: 200px;
}

.box6 {
  padding-bottom: 0;
}

.box9 {
  padding-bottom: 50px;
  /* align-self allows us to overwrite the styling of parent containers/divs */
  align-self: center;
}
